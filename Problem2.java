// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
//
//        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import java.util.ArrayList;

public class Problem2 {
  public static void main(String[] args) {

    ArrayList<Integer> fib = populate();
    ArrayList<Integer> evens = evens(fib);
    int sum = evens.stream().mapToInt(Integer::intValue).sum();

    System.out.println("Fib: " + fib);
    System.out.println("The sum is: " + sum);

  }

  private static ArrayList<Integer> populate() {
    ArrayList<Integer> fib = new ArrayList<>();
    int max = 4_000_000;
    fib.add(1);
    fib.add(2);
    fib.add(3);

    while (fib.get(fib.size()-1) < max) {
      int next = nextVal(fib);
      if (next > max) {
        break;
      }
      else {
        fib.add(next);
      }
    }

    return fib;
  }

  private static int nextVal(ArrayList<Integer> fib) {
    return fib.get(fib.size()-1) + fib.get(fib.size()-2);
  }

  private static ArrayList<Integer> evens(ArrayList<Integer> fib) {
    ArrayList<Integer> even = new ArrayList<>();
    for(int i=0; i<fib.size(); i++) {
      int val = fib.get(i);
      if (val % 2 == 0) {
        even.add(val);
      }
    }
    return even;
  }
}
